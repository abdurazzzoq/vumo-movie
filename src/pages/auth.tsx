import { TextField } from "@/components";
import Head from "next/head";
import Image from "next/image";
import React from "react";
import { useState, useContext } from "react";
import { Formik, Form } from "formik";
import * as Yup from 'yup'
import  {AuthContext}  from 'src/context/auth.context'
import { GetServerSideProps } from "next";


// function is started
const Auth = () => {
  const [auth, setAuth] = useState<"signin" | "signup">("signin");

  const {error, isLoading, signIn, signUp, user} = useContext(AuthContext)


  

  // changing the sign in and sign up page
  const toggleAuth = (state: "signin" | "signup") => {
    setAuth(state);
  };

  // registration and sign in part  
  const onSubmit = async(formData:{email:string, password: string}) => {
    if(auth==='signin'){
      signIn(formData.email, formData.password);
    }else{
      signUp(formData.email, formData.password);
    }
  };

  // validation 
  const validation = Yup.object({
    email: Yup.string().email('Enter your email address').required('Enter is required'),
    password: Yup.string().min(6 ,'6 minimum characters').required('Password is required'),
  })

// UI part
  return (
    <div className="relative flex flex-col h-screen w-screen md:justify-center md:items-center ">
      <Head>
        <title>Auth</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Animate.svg" />
      </Head>

      <Image
        src={"https://rb.gy/tqh4m"}
        alt="bg"
        fill
        className="cover -z-10 opacity-60"
      />

      <Image
        src={"/Animate.svg"}
        alt="logo"
        width={70}
        height={70}
        className="absolute left-4 top-4 object-contain cursor-pointer"
      />

        {/* form */}
        <Formik initialValues={{ email:'', password:''}} onSubmit={onSubmit} validationSchema={validation}>
          <Form className="relative space-y-8 mt-24 md:mt-0 md:max-w-md md:px-10 py-10 px-6 rounded bg-black/75">
            {error && <p className="text-red-500 font-semibold">{error}</p>}
          <h1 className="font-semibold text-4xl">
          {auth === "signup" ? "Tizimga kirish" : "Ro'yhatdan o'tish"}
        </h1>
            <div className="space-y-4">
              <TextField name="email" placeholder="Email" type={'text'} />
              <TextField
                name="password"
                placeholder="Password"
                type={'password'}
              />
            </div>

           
              <button
                type="submit"
                disabled={isLoading}
                className="w-full font-semibold rounded bg-[#E10856] py-3 mt-4"
              >
                {isLoading ? 'Loading...' : auth === 'signin' ? "Tizimga kirish" : "Ro'yhatdan o'tish" }
             
              </button> 
           

{auth === "signin" ? (
          <div className=" text-[gray]">
            Akkauntingiz yo'qmi?{" "}
            <button
              type="button"
              className=" text-white hover:underline"
              onClick={() => toggleAuth("signup")}
            >
              Ro'yhatdan o'tish
            </button>
          </div>
        ) : (
          <div className=" text-[gray]">
            Akkauntingiz bormi?{" "}
            <button
              type="button"
              className=" text-white hover:underline"
              onClick={() => toggleAuth("signin")}
            >
              Tizimga kirish
            </button>
          </div>
        )}
          </Form>
        </Formik>

      
      </div>
  );
};

export default Auth;



export const getServerSideProps: GetServerSideProps = async ({req}) => {

  const user_id = req.cookies.user_id

  if(user_id){
    return {
      redirect: {destination:'/', permanent:false}
    }
  }
  return {
    props:{}
  }
}

